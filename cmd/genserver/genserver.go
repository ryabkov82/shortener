package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"regexp"
	"strings"
	"text/template"
)

type Method struct {
	Name       string
	Request    string
	Response   string
	HandlerVar string
}

const tmpl = `// Code generated by genserver from proto; DO NOT EDIT.

package grpchandlers

import (
	"context"

	"github.com/ryabkov82/shortener/api"
	"github.com/ryabkov82/shortener/internal/app/handlers/grpc/base"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

type ServerOption func(s *Server)

{{range .}}
type {{.Name}}Endpoint interface {
	{{.Name}}(ctx context.Context, req *api.{{.Request}}) (*api.{{.Response}}, error)
}

func With{{.Name}}Endpoint(h {{.Name}}Endpoint) ServerOption {
	return func(s *Server) {
		s.{{.HandlerVar}} = h
	}
}
{{end}}

type Server struct {
	api.UnimplementedShortenerServer
	*base.BaseHandler

	{{range .}}{{.HandlerVar}} {{.Name}}Endpoint
	{{end}}
}

func NewServer(baseHandler *base.BaseHandler, opts ...ServerOption) *Server {
	s := &Server{BaseHandler: baseHandler}
	for _, opt := range opts {
		opt(s)
	}
	return s
}

{{range .}}
func (s *Server) {{.Name}}(ctx context.Context, req *api.{{.Request}}) (*api.{{.Response}}, error) {
	if s.{{.HandlerVar}} == nil {
		return nil, status.Error(codes.Unimplemented, "{{.Name}} handler not provided")
	}
	return s.{{.HandlerVar}}.{{.Name}}(ctx, req)
}
{{end}}
`

func main() {
	protoFile := "./api/shortener.proto"

	f, err := os.Open(protoFile)
	if err != nil {
		log.Fatalf("failed to open proto file: %v", err)
	}
	defer f.Close()

	rpcRe := regexp.MustCompile(`rpc\s+(\w+)\s*\(\s*(\w+)\s*\)\s+returns\s*\(\s*(\w+)\s*\);`)
	serviceStartRe := regexp.MustCompile(`service\s+(\w+)\s*{`)

	var inService bool
	var methods []Method

	scanner := bufio.NewScanner(f)
	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())

		if !inService {
			if serviceStartRe.MatchString(line) {
				inService = true
			}
			continue
		}

		if line == "}" {
			inService = false
			break
		}

		matches := rpcRe.FindStringSubmatch(line)
		if len(matches) == 4 {
			name := matches[1]
			req := matches[2]
			resp := matches[3]

			methods = append(methods, Method{
				Name:       name,
				Request:    req,
				Response:   resp,
				HandlerVar: name + "Handler",
			})
		}
	}

	if err := scanner.Err(); err != nil {
		log.Fatalf("reading proto file error: %v", err)
	}

	// Генерируем файл
	t := template.Must(template.New("server").Parse(tmpl))
	outFile := "./internal/app/handlers/grpc/server_gen.go"
	out, err := os.Create(outFile)
	if err != nil {
		log.Fatalf("cannot create output file: %v", err)
	}
	defer out.Close()

	if err := t.Execute(out, methods); err != nil {
		log.Fatalf("template execution failed: %v", err)
	}

	fmt.Printf("server_gen.go успешно сгенерирован: %s\n", outFile)
}
