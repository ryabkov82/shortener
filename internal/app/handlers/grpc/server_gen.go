// Code generated by genserver from proto; DO NOT EDIT.

package grpchandlers

import (
	"context"

	"github.com/ryabkov82/shortener/api"
	"github.com/ryabkov82/shortener/internal/app/handlers/grpc/base"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

type ServerOption func(s *Server)


type CreateShortURLEndpoint interface {
	CreateShortURL(ctx context.Context, req *api.CreateRequest) (*api.CreateResponse, error)
}

func WithCreateShortURLEndpoint(h CreateShortURLEndpoint) ServerOption {
	return func(s *Server) {
		s.CreateShortURLHandler = h
	}
}

type GetOriginalURLEndpoint interface {
	GetOriginalURL(ctx context.Context, req *api.GetRequest) (*api.GetResponse, error)
}

func WithGetOriginalURLEndpoint(h GetOriginalURLEndpoint) ServerOption {
	return func(s *Server) {
		s.GetOriginalURLHandler = h
	}
}

type PingEndpoint interface {
	Ping(ctx context.Context, req *api.PingRequest) (*api.PingResponse, error)
}

func WithPingEndpoint(h PingEndpoint) ServerOption {
	return func(s *Server) {
		s.PingHandler = h
	}
}

type GetStatsEndpoint interface {
	GetStats(ctx context.Context, req *api.StatsRequest) (*api.StatsResponse, error)
}

func WithGetStatsEndpoint(h GetStatsEndpoint) ServerOption {
	return func(s *Server) {
		s.GetStatsHandler = h
	}
}

type GetUserURLsEndpoint interface {
	GetUserURLs(ctx context.Context, req *api.UserURLsRequest) (*api.UserURLsResponse, error)
}

func WithGetUserURLsEndpoint(h GetUserURLsEndpoint) ServerOption {
	return func(s *Server) {
		s.GetUserURLsHandler = h
	}
}

type DeleteUserURLsEndpoint interface {
	DeleteUserURLs(ctx context.Context, req *api.DeleteRequest) (*api.DeleteResponse, error)
}

func WithDeleteUserURLsEndpoint(h DeleteUserURLsEndpoint) ServerOption {
	return func(s *Server) {
		s.DeleteUserURLsHandler = h
	}
}

type BatchCreateEndpoint interface {
	BatchCreate(ctx context.Context, req *api.BatchCreateRequest) (*api.BatchCreateResponse, error)
}

func WithBatchCreateEndpoint(h BatchCreateEndpoint) ServerOption {
	return func(s *Server) {
		s.BatchCreateHandler = h
	}
}


type Server struct {
	api.UnimplementedShortenerServer
	*base.BaseHandler

	CreateShortURLHandler CreateShortURLEndpoint
	GetOriginalURLHandler GetOriginalURLEndpoint
	PingHandler PingEndpoint
	GetStatsHandler GetStatsEndpoint
	GetUserURLsHandler GetUserURLsEndpoint
	DeleteUserURLsHandler DeleteUserURLsEndpoint
	BatchCreateHandler BatchCreateEndpoint
	
}

func NewServer(baseHandler *base.BaseHandler, opts ...ServerOption) *Server {
	s := &Server{BaseHandler: baseHandler}
	for _, opt := range opts {
		opt(s)
	}
	return s
}


func (s *Server) CreateShortURL(ctx context.Context, req *api.CreateRequest) (*api.CreateResponse, error) {
	if s.CreateShortURLHandler == nil {
		return nil, status.Error(codes.Unimplemented, "CreateShortURL handler not provided")
	}
	return s.CreateShortURLHandler.CreateShortURL(ctx, req)
}

func (s *Server) GetOriginalURL(ctx context.Context, req *api.GetRequest) (*api.GetResponse, error) {
	if s.GetOriginalURLHandler == nil {
		return nil, status.Error(codes.Unimplemented, "GetOriginalURL handler not provided")
	}
	return s.GetOriginalURLHandler.GetOriginalURL(ctx, req)
}

func (s *Server) Ping(ctx context.Context, req *api.PingRequest) (*api.PingResponse, error) {
	if s.PingHandler == nil {
		return nil, status.Error(codes.Unimplemented, "Ping handler not provided")
	}
	return s.PingHandler.Ping(ctx, req)
}

func (s *Server) GetStats(ctx context.Context, req *api.StatsRequest) (*api.StatsResponse, error) {
	if s.GetStatsHandler == nil {
		return nil, status.Error(codes.Unimplemented, "GetStats handler not provided")
	}
	return s.GetStatsHandler.GetStats(ctx, req)
}

func (s *Server) GetUserURLs(ctx context.Context, req *api.UserURLsRequest) (*api.UserURLsResponse, error) {
	if s.GetUserURLsHandler == nil {
		return nil, status.Error(codes.Unimplemented, "GetUserURLs handler not provided")
	}
	return s.GetUserURLsHandler.GetUserURLs(ctx, req)
}

func (s *Server) DeleteUserURLs(ctx context.Context, req *api.DeleteRequest) (*api.DeleteResponse, error) {
	if s.DeleteUserURLsHandler == nil {
		return nil, status.Error(codes.Unimplemented, "DeleteUserURLs handler not provided")
	}
	return s.DeleteUserURLsHandler.DeleteUserURLs(ctx, req)
}

func (s *Server) BatchCreate(ctx context.Context, req *api.BatchCreateRequest) (*api.BatchCreateResponse, error) {
	if s.BatchCreateHandler == nil {
		return nil, status.Error(codes.Unimplemented, "BatchCreate handler not provided")
	}
	return s.BatchCreateHandler.BatchCreate(ctx, req)
}

